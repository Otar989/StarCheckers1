// Telegram webhook handler: replies with a welcome message on /start
// This endpoint should be configured as the bot webhook URL in BotFather or via the provided set-webhook route.

type TelegramUser = {
  id: number
  is_bot?: boolean
  first_name?: string
  last_name?: string
  username?: string
}

type TelegramChat = {
  id: number
  type: string
}

type TelegramMessage = {
  message_id: number
  from?: TelegramUser
  chat: TelegramChat
  text?: string
}

type TelegramUpdate = {
  update_id: number
  message?: TelegramMessage
}

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || ""
const SECRET_TOKEN = process.env.TELEGRAM_WEBHOOK_SECRET || ""
const APP_URL = process.env.NEXT_PUBLIC_APP_URL || ""
const WELCOME_MEDIA = process.env.TELEGRAM_WELCOME_MEDIA // e.g. "/welcome.gif" or full URL
const WELCOME_MEDIA_TYPE = (process.env.TELEGRAM_WELCOME_MEDIA_TYPE || "animation").toLowerCase() as
  | "animation"
  | "photo"

async function callTelegram(method: string, payload: unknown) {
  if (!BOT_TOKEN) throw new Error("TELEGRAM_BOT_TOKEN is not configured")
  const res = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/${method}`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(payload),
  })
  return res.json()
}

function buildAppUrl(origin: string): string {
  // Prefer explicit env; otherwise fall back to current site origin
  const url = APP_URL || origin
  // Ensure HTTPS for Telegram if a bare host is provided
  if (url.startsWith("http://") || url.startsWith("https://")) return url
  return `https://${url}`
}

export async function POST(request: Request) {
  try {
    if (!BOT_TOKEN) {
      return new Response("Bot token missing", { status: 500 })
    }

    // Optional Telegram secret validation
    if (SECRET_TOKEN) {
      const header = request.headers.get("x-telegram-bot-api-secret-token")
      if (header !== SECRET_TOKEN) {
        return new Response("Forbidden", { status: 403 })
      }
    }

    const update = (await request.json()) as TelegramUpdate

    const msg = update.message
    if (!msg) return Response.json({ ok: true })

    const text = (msg.text || "").trim()
    if (text.startsWith("/start")) {
      // Extract start payload if present: "/start payload" (–Ω–µ –≤—ã–≤–æ–¥–∏–º —Ç–µ–ø–µ—Ä—å –≤ —Ç–µ–∫—Å—Ç–µ)
      const name = msg.from?.first_name || msg.from?.username || "–ò–≥—Ä–æ–∫"

      // @ts-ignore - in Next.js runtime this may be NextRequest with nextUrl
      const origin = (request as any).nextUrl?.origin || ""
      const appUrl = buildAppUrl(origin)

      const welcome = [
        `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ StarCheckers ‚Äì –ø—Ä–µ–º–∏—É–º –∏–≥—Ä—É –≤ —à–∞—à–∫–∏ –ø—Ä—è–º–æ –≤ Telegram, ${name}!`,
        "",
        "‚ú® –ó–¥–µ—Å—å —Ç–µ–±—è –∂–¥—ë—Ç:",
        "‚Ä¢ ü§ñ –ò–≥—Ä–∞ —Å —É–º–Ω—ã–º –ò–ò ‚Äì –æ—Ç –ª—ë–≥–∫–æ–≥–æ –¥–æ —Å–ª–æ–∂–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.",
        "‚Ä¢ üë´ –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–∞—Ä—Ç–∏—è ‚Äì –∏–≥—Ä–∞–π—Ç–µ –≤–¥–≤–æ—ë–º –Ω–∞ –æ–¥–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ.",
        "‚Ä¢ üåç –û–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º ‚Äì –±—Ä–æ—Å—å –≤—ã–∑–æ–≤ –¥—Ä—É–∑—å—è–º –∏–ª–∏ –Ω–æ–≤—ã–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞–º.",
        "‚Ä¢ ‚≠ê –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω –∏ –ø–ª–∞–≤–Ω—ã–π –≥–µ–π–º–ø–ª–µ–π ‚Äì –º–∞–∫—Å–∏–º—É–º —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è –æ—Ç –∫–∞–∂–¥–æ–π –ø–∞—Ä—Ç–∏–∏.",
        "",
        "üéÆ –ù–∞—á–Ω–∏ –∏–≥—Ä—É —É–∂–µ —Å–µ–π—á–∞—Å –∏ –¥–æ–∫–∞–∂–∏, –∫—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∏–π –º–∞—Å—Ç–µ—Ä —à–∞—à–µ–∫!",
        "",
        "üëâ –ù–∞–∂–º–∏ ¬´–ò–≥—Ä–∞—Ç—å¬ª –∏ –≤—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º.",
      ].join("\n")

      const replyMarkup: any = {
        inline_keyboard: [
          [
            {
              text: "–ò–≥—Ä–∞—Ç—å",
              web_app: { url: appUrl },
            },
          ],
        ],
      }

      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –º–µ–¥–∏–∞. –ï—Å–ª–∏ –∑–∞–¥–∞–Ω –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å / –∏–ª–∏ –±–µ–∑ —Å—Ö–µ–º—ã), –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –¥–æ–º–µ–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
      const defaultPath = "/welcome.gif"
      const rawPath = WELCOME_MEDIA || defaultPath
      const mediaUrlRaw = rawPath.startsWith("http://") || rawPath.startsWith("https://")
        ? rawPath
        : `${appUrl}${rawPath.startsWith("/") ? "" : "/"}${rawPath}`
      // Encode to safely handle spaces/unicode in filenames
      const mediaUrl = encodeURI(mediaUrlRaw)
      const photoFallbackUrl = `${appUrl}/placeholder.jpg`

      let ok = false
      if (WELCOME_MEDIA_TYPE === "photo") {
        const resp = (await callTelegram("sendPhoto", {
          chat_id: msg.chat.id,
          photo: mediaUrl,
          caption: welcome,
          parse_mode: "HTML",
          reply_markup: replyMarkup,
        })) as any
        ok = !!resp?.ok
      } else {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –∞–Ω–∏–º–∞—Ü–∏—é (GIF/MP4). –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî —Ñ–æ–ª–±—ç–∫ –Ω–∞ —Ñ–æ—Ç–æ.
        const resp = (await callTelegram("sendAnimation", {
          chat_id: msg.chat.id,
          animation: mediaUrl,
          caption: welcome,
          parse_mode: "HTML",
          reply_markup: replyMarkup,
        })) as any
        ok = !!resp?.ok
      }

      if (!ok) {
        await callTelegram("sendPhoto", {
          chat_id: msg.chat.id,
          photo: photoFallbackUrl,
          caption: welcome,
          parse_mode: "HTML",
          reply_markup: replyMarkup,
        })
      }
    }

    // Always respond quickly to Telegram
    return Response.json({ ok: true })
  } catch (e) {
    console.error("telegram webhook error", e)
    // Still return 200 to avoid long retry loops ‚Äî better to observe logs
    return new Response("Internal error", { status: 200 })
  }
}
